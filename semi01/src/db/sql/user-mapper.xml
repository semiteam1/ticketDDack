<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

<entry key="loginMember">
<!-- 로그인 -->
SELECT
       USER_NO
     , USER_ID
     , USER_PWD
     , USER_NAME
     , TO_CHAR(TO_DATE(USER_BIRTH, 'RR/MM/DD'), 'RRRR-MM-DD') "USER_BIRTH"
     , C.CATEGORY_NAME "INTEREST_MOVIE"
     , D.CATEGORY_NAME "INTEREST_DISPLAY"
     , E.CATEGORY_NAME "INTEREST_SHOW"
     , EMAIL
     , PHONE
     , GRADE_NAME
     , TO_CHAR(ENROLL_DATE, 'RRRR-MM-DD') "ENROLL_DATE"
     , STATUS
  FROM USER_INFO
  JOIN CATEGORY_INFO C ON (INTEREST_MOVIE = C.CATEGORY_TYPE)
  JOIN CATEGORY_INFO D ON (INTEREST_DISPLAY = D.CATEGORY_TYPE)
  JOIN CATEGORY_INFO E ON (INTEREST_SHOW = E.CATEGORY_TYPE)
  JOIN GRADE G USING(GRADE_NO)
 WHERE USER_ID = ?
   AND USER_PWD = ?
   AND STATUS = 'Y'
</entry>
<entry key="insertUser">
<!-- 회원가입 -->
	INSERT 
	  INTO USER_INFO 
	     (
	       USER_NO
	     , USER_ID
	     , USER_PWD
	     , USER_NAME
	     , USER_BIRTH
	     , INTEREST_MOVIE
	     , INTEREST_DISPLAY
	     , INTEREST_SHOW
	     , EMAIL
	     , PHONE
	     , GRADE_NO
	     , STATUS
	     )
	VALUES 
	     (
	       SEQ_UNO.NEXTVAL
	     , ?
	     , ?
	     , ?
	     , ?
	     , ?
	     , ?
	     , ?
	     , ?
	     , ?
	     , 1
	     ,'Y')
</entry>
<entry key="findIdWithEmail">
<!-- 이멜로 아디찾기 -->
SELECT
       USER_NO
     , USER_ID
     , USER_PWD
     , USER_NAME
     , USER_BIRTH
     , C.CATEGORY_NAME  "INTEREST_MOVIE"
     , D.CATEGORY_NAME "INTEREST_DISPLAY"
     , E.CATEGORY_NAME "INTEREST_SHOW"
     , EMAIL
     , PHONE
     , GRADE_NAME
     , STATUS
  FROM USER_INFO
  JOIN CATEGORY_INFO C ON (INTEREST_MOVIE = C.CATEGORY_TYPE)
  JOIN CATEGORY_INFO D ON (INTEREST_DISPLAY = D.CATEGORY_TYPE)
  JOIN CATEGORY_INFO E ON (INTEREST_SHOW = E.CATEGORY_TYPE)
  JOIN GRADE G USING(GRADE_NO)
 WHERE USER_NAME = ?
   AND USER_BIRTH = ?
   AND EMAIL = ?
</entry>
<entry key="findIdWithPhone">
<!-- 폰으로 아디찾기 -->
SELECT
       USER_NO
     , USER_ID
     , USER_PWD
     , USER_NAME
     , USER_BIRTH
     , C.CATEGORY_NAME  "INTEREST_MOVIE"
     , D.CATEGORY_NAME "INTEREST_DISPLAY"
     , E.CATEGORY_NAME "INTEREST_SHOW"
     , EMAIL
     , PHONE
     , GRADE_NAME
     , STATUS
  FROM USER_INFO
  JOIN CATEGORY_INFO C ON (INTEREST_MOVIE = C.CATEGORY_TYPE)
  JOIN CATEGORY_INFO D ON (INTEREST_DISPLAY = D.CATEGORY_TYPE)
  JOIN CATEGORY_INFO E ON (INTEREST_SHOW = E.CATEGORY_TYPE)
  JOIN GRADE G USING(GRADE_NO)
 WHERE USER_NAME = ?
   AND USER_BIRTH = ?
   AND PHONE = ?
</entry>
<entry key="findPwdWithEmail">
<!-- 이멜로 비번찾기 -->
SELECT
       USER_NO
     , USER_ID
     , USER_PWD
     , USER_NAME
     , USER_BIRTH
     , C.CATEGORY_NAME  "INTEREST_MOVIE"
     , D.CATEGORY_NAME "INTEREST_DISPLAY"
     , E.CATEGORY_NAME "INTEREST_SHOW"
     , EMAIL
     , PHONE
     , GRADE_NAME
     , STATUS
  FROM USER_INFO
  JOIN CATEGORY_INFO C ON (INTEREST_MOVIE = C.CATEGORY_TYPE)
  JOIN CATEGORY_INFO D ON (INTEREST_DISPLAY = D.CATEGORY_TYPE)
  JOIN CATEGORY_INFO E ON (INTEREST_SHOW = E.CATEGORY_TYPE)
  JOIN GRADE G USING(GRADE_NO)
 WHERE USER_ID = ?
   AND USER_BIRTH = ?
   AND EMAIL = ?
</entry>
<entry key="findPwdWithPhone">
<!-- 폰으로 비번찾기 -->
SELECT
       USER_NO
     , USER_ID
     , USER_PWD
     , USER_NAME
     , USER_BIRTH
     , C.CATEGORY_NAME  "INTEREST_MOVIE"
     , D.CATEGORY_NAME "INTEREST_DISPLAY"
     , E.CATEGORY_NAME "INTEREST_SHOW"
     , EMAIL
     , PHONE
     , GRADE_NAME
     , STATUS
  FROM USER_INFO
  JOIN CATEGORY_INFO C ON (INTEREST_MOVIE = C.CATEGORY_TYPE)
  JOIN CATEGORY_INFO D ON (INTEREST_DISPLAY = D.CATEGORY_TYPE)
  JOIN CATEGORY_INFO E ON (INTEREST_SHOW = E.CATEGORY_TYPE)
  JOIN GRADE G USING(GRADE_NO)
 WHERE USER_ID = ?
   AND USER_BIRTH = ?
   AND PHONE = ?
</entry>
<entry key="changePwd">
<!-- 비번 변경 -->
UPDATE USER_INFO
   SET USER_PWD = ?
 WHERE USER_NO = ?
   AND USER_ID = ?
   AND USER_PWD = ?
</entry>

<entry key="idCheck">
<!--  아이디 체크용 -->
	SELECT 
	       COUNT(*) COUNT
	  FROM USER_INFO
	 WHERE USER_ID = ?
</entry>

<!-- 마이페이지 -->

<!-- 회원정보 조회용 SQL -->
<entry key="selectUser">
	SELECT
	       USER_NO
	     , USER_ID
	     , USER_PWD
	     , USER_NAME
	     , TO_CHAR(TO_DATE(USER_BIRTH, 'RR/MM/DD'), 'RRRR-MM-DD') "USER_BIRTH"
	     , M.CATEGORY_NAME "INTEREST_MOVIE"
	     , D.CATEGORY_NAME "INTEREST_DISPLAY"
	     , S.CATEGORY_NAME "INTEREST_SHOW"
	     , EMAIL
	     , PHONE
	     , GRADE_NAME
	     , TO_CHAR(ENROLL_DATE, 'RRRR-MM-DD') "ENROLL_DATE"
	     , STATUS
	  FROM USER_INFO
	  JOIN CATEGORY_INFO M ON (INTEREST_MOVIE = M.CATEGORY_TYPE)
	  JOIN CATEGORY_INFO D ON (INTEREST_DISPLAY = D.CATEGORY_TYPE)
	  JOIN CATEGORY_INFO S ON (INTEREST_SHOW = S.CATEGORY_TYPE)
	  JOIN GRADE USING (GRADE_NO)
	 WHERE USER_NO = ?
	   AND STATUS = 'Y'
</entry>

<!-- 회원정보 수정용 SQL -->
<entry key="updateUser">
	UPDATE USER_INFO
	   SET USER_NAME = ?
	     , INTEREST_MOVIE = ?
	     , INTEREST_DISPLAY = ?
	     , INTEREST_SHOW = ?
	     , EMAIL = ?
	     , PHONE = ?
	 WHERE USER_NO = ?
</entry>

<!-- 비밀번호 변경용 SQL -->
<entry key="updatePwd">
	UPDATE USER_INFO
	    SET USER_PWD = ?
	  WHERE USER_NO = ?
</entry>

<!-- 회원탈퇴용 SQL -->
<entry key="deleteUser">
	UPDATE USER_INFO
	    SET STATUS = 'N'
	  WHERE USER_NO = ?
</entry>

<!-- 마이등급 -->

<!-- 예매횟수 조회용 SQL -->
<entry key="selectBookCount">
	SELECT COUNT(*) "COUNT"
	  FROM BOOKED_INFO
	 WHERE USER_NO = ?
     AND STATUS = 'Y'
</entry>

<!-- 총 예매 금액 조회용 SQL -->
<entry key="selectBookPrice">
  SELECT TO_CHAR(SUM((PRICE * AUDIENCE) * (1 - GRADE_DISCOUNT)), '999,999,999') "PRICE"
	FROM BOOKED_INFO B
	JOIN PRODUCT USING (PRODUCT_NO)
	JOIN USER_INFO USING (USER_NO)
	JOIN GRADE USING (GRADE_NO)
	WHERE USER_NO = ?
	AND B.STATUS = 'Y'
</entry>

<!-- 마이 리뷰 -->

<!-- 회원이 작성한 리뷰 개수 조회용 SQL -->
<entry key="selectReviewCount">
	SELECT COUNT(*) "COUNT"
	  FROM REVIEW_INFO
	 WHERE USER_NO = ?
	   AND STATUS = 'Y'
</entry>

<!-- 회원이 작성한 리뷰 조회용 SQL -->
<entry key="selectAllReview">
	SELECT *
	  FROM (
	        SELECT ROWNUM RNUM, A.*
	          FROM (
	                SELECT
	                	   DISTINCT REVIEW_NO
                         , B.PRODUCT_NO
                         , IMAGE_PATH || '/' || POSTER_NAME "TITLE_IMG"
	                     , PRODUCT_TITLE
	                     , SUBSTR(USER_ID, 1, 1) || '**' || SUBSTR(USER_ID, 4) "USER_ID"
	                     , TO_CHAR(REVIEW_DATE, 'RRRR-MM-DD') "REVIEW_DATE"
	                     , REVIEW_CONTENT
	                     , R.STATUS
	                  FROM REVIEW_INFO R
	                  JOIN BOOKED_INFO B ON (R.BOOKED_NO = B.BOOKED_NO)
                      JOIN PRODUCT P ON (B.PRODUCT_NO = P.PRODUCT_NO)
	                  JOIN USER_INFO U ON (R.USER_NO = U.USER_NO)
                      JOIN PRODUCT_IMG I ON (B.PRODUCT_NO = I.PRODUCT_NO)
	                 WHERE R.USER_NO = ?
	                   AND R.STATUS = 'Y'
	                 ORDER
	                    BY 1 DESC
	                ) A
	                )
	  WHERE RNUM BETWEEN ? AND ?
</entry>

<!-- 회원이 작성한 리뷰 상세 조회용 SQL -->
<entry key="selectReview">
	SELECT 
	       DISTINCT REVIEW_NO
	     , PRODUCT_TITLE
	     , USER_ID
	     , TO_CHAR(REVIEW_DATE, 'RRRR-MM-DD') "REVIEW_DATE"
	     , REVIEW_CONTENT
	  FROM REVIEW_INFO R
	  JOIN BOOKED_INFO USING (BOOKED_NO)
	  JOIN PRODUCT USING (PRODUCT_NO)
	  JOIN USER_INFO U ON (R.USER_NO = U.USER_NO)
	 WHERE REVIEW_NO = ?
</entry>

<!-- 리뷰 수정용 SQL -->
<entry key="updateReview">
	UPDATE REVIEW_INFO
	   SET REVIEW_CONTENT = ?
	     , REVIEW_DATE = SYSDATE
	 WHERE REVIEW_NO = ?
</entry>

<!-- 리뷰 삭제용 SQL -->
<entry key="deleteReview">
	UPDATE REVIEW_INFO
	   SET STATUS = 'N'
	 WHERE REVIEW_NO = ?
</entry>

<!-- 마이티켓 -->

<!-- 회원이 예매한 티켓 수 조회용 SQL -->
<entry key="selectTicketCount">
	SELECT COUNT(*) "COUNT"
	  FROM BOOKED_INFO
	 WHERE USER_NO = ?
	   AND STATUS = 'Y'
</entry>

<!-- 회원 예매내역 조회용 SQL -->
<entry key="selectAllTicket">
	SELECT *
	  FROM (
	        SELECT ROWNUM RNUM, A.*
	          FROM (
	                SELECT 
	                       DISTINCT BOOKED_NO
                         , B.PRODUCT_NO  
	                     , IMAGE_PATH || '/' || POSTER_NAME "TITLE_IMG"
	                     , PRODUCT_TITLE
	                     , SUBSTR(ADDRESS, 1, (INSTR(ADDRESS, '_') - 1)) "ADDRESS"
	                     , SCREEN_DATE || '(' || TO_CHAR(TO_DATE(SCREEN_DATE), 'DY') || ')' || ' ' || SCREEN_TIME "SCREEN_DATE"
	                  FROM PRODUCT_IMG I
	                  JOIN PRODUCT P ON (I.PRODUCT_NO = P.PRODUCT_NO)
	                  JOIN BOOKED_INFO B ON (P.PRODUCT_NO = B.PRODUCT_NO)
	                  JOIN SCREENING_INFO ON (SCREEN_DATE = SCREENING_DATE)
	                 WHERE USER_NO = ?
	                   AND STATUS = 'Y'
	                 ORDER 
	                    BY 1 DESC
	                ) A
	        )
	  WHERE RNUM BETWEEN ? AND ?
</entry>

<!-- 회원 예매내역 상세보기용 SQL -->
<entry key="selectTicketDetail">
	SELECT
		   DISTINCT BOOKED_NO
	     , PRODUCT_TITLE
	     , AUDIENCE
	     , PAYMENT_NAME
	     , PRICE
	     , SCREEN_DATE || '(' || TO_CHAR(TO_DATE(SCREEN_DATE), 'DY') || ')' || ' ' || SCREEN_TIME "SCREEN_DATE"
	     , SUBSTR(ADDRESS, 1, (INSTR(ADDRESS, '_') - 1)) "ADDRESS"
	     , GRADE_NAME
	     , GRADE_DISCOUNT
	  FROM BOOKED_INFO
	  JOIN PRODUCT USING (PRODUCT_NO)
	  JOIN SCREENING_INFO ON (SCREEN_DATE = SCREENING_DATE)
	  JOIN PAYMENT ON (PAYMENT = PAYMENT_NO)
	  JOIN USER_INFO USING (USER_NO)
	  JOIN GRADE USING (GRADE_NO)
	 WHERE BOOKED_NO = ?
</entry>

<!-- 예매내역 취소 전으로 좌석 수를 돌려주는 SQL -->
<entry key="increaseDaySeatCount">
	UPDATE SCREENING_INFO
	   SET SCREENING_DAY_SEAT = SCREENING_DAY_SEAT + (
                                                   	 SELECT AUDIENCE
                                                       FROM BOOKED_INFO
                                                      WHERE BOOKED_NO = ?
	                                                 )
	 WHERE (PRODUCT_NO, SCREENING_DATE) = (
                                          SELECT PRODUCT_NO, SCREEN_DATE
                                            FROM BOOKED_INFO
                                           WHERE BOOKED_NO = ?
	                                      ) 
</entry>

<entry key="increaseNightSeatCount">
	UPDATE SCREENING_INFO
	   SET SCREENING_NIGHT_SEAT = SCREENING_NIGHT_SEAT + (
                                                   	 SELECT AUDIENCE
                                                       FROM BOOKED_INFO
                                                      WHERE BOOKED_NO = ?
	                                                 )
	 WHERE (PRODUCT_NO, SCREENING_DATE) = (
                                          SELECT PRODUCT_NO, SCREEN_DATE
                                            FROM BOOKED_INFO
                                           WHERE BOOKED_NO = ?
	                                      ) 
</entry>

<!-- 예매내역 삭제용 SQL -->
<entry key="deleteTicket">
	UPDATE BOOKED_INFO
	   SET STATUS = 'N'
	 WHERE BOOKED_NO = ?
</entry>

<!-- 회원 등급 조회용 SQL -->
<entry key="selectGradeInfo">
	SELECT
	       GRADE_NO
	     , GRADE_NAME
	     , GRADE_DISCOUNT  
	  FROM GRADE
	  JOIN USER_INFO USING (GRADE_NO)
	 WHERE USER_NO = ?
</entry>

<!-- 리뷰 등록용 SQL -->
<entry key="insertReview">
	INSERT
	  INTO REVIEW_INFO
	     (
	       REVIEW_NO
	     , BOOKED_NO
	     , REVIEW_CONTENT
	     , USER_NO
	     )
	VALUES
	     (
	       SEQ_RNO.NEXTVAL
	     , ?
	     , ?
	     , ?
	     )
</entry>

<!-- 리뷰 작성 안 한 예매내역 개수 조회용 SQL -->
<entry key="selectTicketWithoutReviewCount">
	SELECT COUNT(*) "COUNT"
	  FROM BOOKED_INFO
	 WHERE USER_NO = ?
       AND STATUS = 'Y'
       AND BOOKED_NO NOT IN (
                            SELECT BOOKED_NO
                              FROM REVIEW_INFO
                            )  
</entry>

<!-- 리뷰 작성 안 한 예매내역 조회용 SQL -->
<entry key="selectTicketWithoutReview">
	SELECT *
	  FROM (
	        SELECT ROWNUM RNUM, A.*
	          FROM (
	                SELECT 
	                       DISTINCT BOOKED_NO
                         , PRODUCT_NO  
	                     , IMAGE_PATH || '/' || POSTER_NAME "TITLE_IMG"
	                     , PRODUCT_TITLE
	                     , SUBSTR(ADDRESS, 1, (INSTR(ADDRESS, '_') - 1)) "ADDRESS"
	                     , SCREEN_DATE || '(' || TO_CHAR(TO_DATE(SCREEN_DATE), 'DY') || ')' || ' ' || SCREEN_TIME "SCREEN_DATE"
	                  FROM BOOKED_INFO
	                  JOIN PRODUCT USING (PRODUCT_NO)
	                  JOIN PRODUCT_IMG USING (PRODUCT_NO)
	                 WHERE BOOKED_NO NOT IN (
	                                        SELECT BOOKED_NO
	                                          FROM REVIEW_INFO
	                                )
	                   AND USER_NO = ?
	                   AND STATUS = 'Y'
	                 ORDER 
	                    BY 1 DESC
	                ) A
	        )
	  WHERE RNUM BETWEEN ? AND ?
</entry>

<entry key="selectLikeCount">
	SELECT 
	       COUNT(*) "count"
	  FROM PRODUCT_LIKE
	 WHERE USER_NO = ?
</entry>

<entry key="selectAllLike">
	SELECT *
	  FROM (
	        SELECT ROWNUM RNUM, A.*
	          FROM (
	                SELECT 
	                       PRODUCT_NO
	                     , PRODUCT_TITLE  
	                     , IMAGE_PATH || '/' || POSTER_NAME "TITLE_IMG"
	                FROM PRODUCT_LIKE
	                JOIN PRODUCT USING (PRODUCT_NO)
	                JOIN PRODUCT_IMG USING (PRODUCT_NO)
	                WHERE USER_NO = ?
	               ) A
	       )
	  WHERE RNUM BETWEEN ? AND ?
</entry>

<entry key="selectProductReview">
	SELECT 
	       DISTINCT REVIEW_NO
	     , PRODUCT_NO
	     , SUBSTR(USER_ID, 1, 1) || '**' || SUBSTR(USER_ID, 4) "USER_ID"
	     , TO_CHAR(REVIEW_DATE, 'RRRR-MM-DD') "REVIEW_DATE"
	     , REVIEW_CONTENT
	  FROM REVIEW_INFO R
	  JOIN BOOKED_INFO USING (BOOKED_NO)
	  JOIN PRODUCT USING (PRODUCT_NO)
	  JOIN USER_INFO U ON (R.USER_NO = U.USER_NO)
	 WHERE PRODUCT_NO = ?
</entry>

</properties>